if {[have_spec linux]} {
	puts "The [run_name] scenario requires QEMU networking."
	exit 1
}

create_boot_directory

import_from_depot [depot_user]/src/[base_src] \
                  [depot_user]/pkg/[drivers_nic_pkg] \
                  [depot_user]/src/init \
                  [depot_user]/src/libc \
                  [depot_user]/src/posix \
                  [depot_user]/src/vfs \
                  [depot_user]/src/vfs_lwip \
                  [depot_user]/src/zlib

build { test/libc_getaddrinfo }

install_config {
<config>
	<parent-provides>
		<service name="CPU"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="IRQ"/>
		<service name="LOG"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="ROM"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="128"/>

	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Timer"/> </provides>
	</start>

	<start name="drivers" caps="1000" managing_system="yes">
		<resource name="RAM" quantum="32M"/>
		<binary name="init"/>
		<route>
			<service name="ROM" label="config"> <parent label="drivers.config"/> </service>
			<service name="Timer"> <child name="timer"/> </service>
			<any-service> <parent/> </any-service>
		</route>
		<provides> <service name="Nic"/> </provides>
	</start>

	<start name="test-libc_getaddrinfo" caps="256">
		<resource name="RAM" quantum="16M"/>
		<config>
			<vfs>
				<dir name="dev"> <log/> </dir>
				<dir name="socket"> <lwip dhcp="yes"/> </dir>
			</vfs>
			<libc stdout="/dev/log" socket="/socket"/>
			<arg value="test-libc_getaddrinfo"/>
			<arg value="genode.org"/>
			<arg value="hypervisor.org"/>
			<arg value="example.com"/>
		</config>
	</start>
</config>
}

build_boot_image { test-libc_getaddrinfo }

append qemu_args " -nographic "
append_qemu_nic_args

run_genode_until "child .* exited with exit value 0.*\n" 20
